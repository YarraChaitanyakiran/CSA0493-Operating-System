#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3


int available[MAX_RESOURCES];


int maximum[MAX_PROCESSES][MAX_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};


int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};


int need[MAX_PROCESSES][MAX_RESOURCES];


bool isSafe(int process, int request[]) {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int i, j;

    
    for (i = 0; i < MAX_RESOURCES; i++) {
        work[i] = available[i];
    }

   
    for (i = 0; i < MAX_RESOURCES; i++) {
        if (request[i] > work[i])
            return false;
        work[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }

  
    for (i = 0; i < MAX_PROCESSES; i++) {
        if (!finish[i]) {
            bool canAllocate = true;
            for (j = 0; j < MAX_RESOURCES; j++) {
                if (need[i][j] > work[j]) {
                    canAllocate = false;
                    break;
                }
            }
            if (canAllocate) {
                finish[i] = true;
                for (j = 0; j < MAX_RESOURCES; j++)
                    work[j] += allocation[i][j];
                i = -1; // Restart the loop
            }
        }
    }

    
    for (i = 0; i < MAX_PROCESSES; i++) {
        if (!finish[i])
            return false;
    }

    return true;
}


void requestResources(int process, int request[]) {
    if (!isSafe(process, request)) {
        printf("Unsafe state, request cannot be granted.\n");
        return;
    }

    printf("Safe state, request granted.\n");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        available[i] -= request[i];
    }
}

int main() {
   
    available[0] = 3;
    available[1] = 3;
    available[2] = 2;

   
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }

   
    int process = 1;
    int request[MAX_RESOURCES] = {1, 0, 2};
    requestResources(process, request);

    return 0;
}
