#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_ITEMS 10

sem_t empty, full, mutex;
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

void *producer(void *arg) {
    int item;
    for (int i = 0; i < NUM_ITEMS; i++) {
        item = i; // Produce item
        sem_wait(&empty); // Wait if buffer is full
        sem_wait(&mutex); // Enter critical section
        buffer[in] = item; // Add item to buffer
        printf("Producer produced item %d\n", item);
        in = (in + 1) % BUFFER_SIZE; // Update buffer index
        sem_post(&mutex); // Exit critical section
        sem_post(&full); // Signal that buffer is not empty
        sleep(1); // Simulate some processing time
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < NUM_ITEMS; i++) {
        sem_wait(&full); // Wait if buffer is empty
        sem_wait(&mutex); // Enter critical section
        item = buffer[out]; // Consume item from buffer
        printf("Consumer consumed item %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Update buffer index
        sem_post(&mutex); // Exit critical section
        sem_post(&empty); // Signal that buffer is not full
        sleep(1); // Simulate some processing time
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Join threads
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Destroy semaphores
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
